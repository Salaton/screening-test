scalar Time

type Customer {
  id: Int!
  name: String!
  email: String!
  phonenumber: String!
  password: String!
}

type Order {
  id: Int!
  # Somewhat A relationship to the customer type
  customer: Customer!
  customer_id: Int!
  # An order can have many items (one to many relationship)
  item: [OrderItem!]!
  totalPrice:Float!
  date_order_placed: Time!
}

type OrderItem {
  id:Int!
  # Relationship to order
  order: Order!
  # Relationship to Product
  product:Product!
  # product_name:String!
  product_id:Int!
  quantity:Int!
}

type Product{
  id:Int!
  name:String!
  Price:Float!
}

input loginDetails {
  email: String!
  password: String!
}

input customerInput {
  name: String!
  email: String!
  phonenumber: String!
  password: String!
}

input orderInput {
  customer_id: Int!
  item: [ItemInput]!
  price:Float!
}

input productInput {
  name:String!
  price:Float!
}

input ItemInput {
  product_id: Int!
  quantity: Int!
}

type Mutation {
  # This will return the token needed for authentication
  # Returns login success / not
  login(input: loginDetails!): String!
  createCustomer(input: customerInput!): Customer!
  createOrder(input: orderInput!): Order!
  createProduct(input:productInput!):Product!
  updateOrder(orderID: Int, input: orderInput!): Order!
  deleteOrder(orderID: Int!): String!
}

type Query {
  customers: [Customer!]!
  orders: [Order!]!
  products:[Product!]!
}
