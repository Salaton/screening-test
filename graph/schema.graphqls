scalar Time

type Customer {
  id: Int!
  name: String!
  email: String!
  phonenumber: String!
  password: String!
}

type Order {
  id: Int!
  # Somewhat A relationship to the customer type
  customer: Customer!
  customer_id: Int!
  # An order can have many items (one to many relationship)
  item: [Item!]!
  price: Float!
  date_order_placed: Time!
}

type Item {
  id: Int!
  order: Order!
  name: String!
  quantity: Int!
}

input loginDetails {
  email: String!
  password: String!
}

input customerInput {
  name: String!
  email: String!
  phonenumber: String!
  password: String!
}

input orderInput {
  customer_id: Int!
  item: [ItemInput]!
  price: Float!
  date_order_placed: Time!
}

input ItemInput {
  name: String!
  quantity: Int!
}

type Mutation {
  # This will return the token needed for authentication
  # Returns login success / not
  login(input: loginDetails!): String!
  createCustomer(input: customerInput!): Customer!
  createOrder(input: orderInput!): Order!
  updateOrder(orderID: Int, input: orderInput!): Order!
  deleteOrder(orderID: Int!): String!
}

type Query {
  customers: [Customer!]!
  orders: [Order!]!
}
