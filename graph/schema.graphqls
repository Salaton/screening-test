scalar Time

type Customer {
  id: Int!
  name: String!
  Phonenumber: Int!
  Email: String!
  #Since A customer might have an order
  orders: [Order!]!
}

type Order {
  id: Int!
  # Somewhat A relationship to the customer type
  # customer: Customer!
  # customer_id: ID!
  # An order can have many items (one to many relationship)
  item: [Item!]!
  price: Float!
  date_order_placed: Time!
}

type Item {
  id: Int!
  name: String!
  quantity: Int!
}

input customerInput {
  name: String!
  Phonenumber: Int!
  Email: String!
  orders: [orderInput!]!
}

input orderInput {
  item: [ItemInput]!
  price: Float!
  date_order_placed: Time!
}

input ItemInput {
  name: String!
  quantity: Int!
}

type Mutation {
  createCustomer(input: customerInput!): Customer!
  # createOrder(input: orderInput!): Order!
  # createItem(input: ItemInput!): Item!
}

type Query {
  customers: [Customer!]!
  orders: [Order!]!
  items: [Item!]!
}
